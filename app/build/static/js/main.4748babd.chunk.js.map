{"version":3,"sources":["components/Autocomplete/index.js","components/Image/index.js","components/LoadingBlock/index.js","api/s3.js","api/images.js","App.js","serviceWorker.js","index.js"],"names":["AutoComplete","state","value","props","currentRefinement","onChange","_","newValue","onSuggestionCleared","setState","onSuggestionsFetchRequested","refine","onSuggestionsClearRequested","hit","text","height","src","url","style","marginRight","alt","Highlight","attribute","tagName","this","hits","onSuggestionSelected","inputProps","placeholder","suggestions","getSuggestionValue","renderSuggestion","Component","connectAutoComplete","Img","styled","img","Wrapper","div","withHover","Image","rest","Circles","small","color","Message","h4","LoadingBlock","quiet","className","level","lines","Math","round","random","length","randomLoadingMessage","getS3Url","axios","get","uploadJpeg","file","put","headers","type","process","createImage","image","post","client","require","algoliasearch","AutocompleteSearchBox","connectSearchBox","App","useState","loading","setLoading","query","setQuery","modalOpen","setModalOpen","modalContent","setModalContent","Container","maxWidth","open","onClose","center","styles","overlay","backdropFilter","background","modal","backgroundColor","borderRadius","display","flexDirection","width","padding","InstantSearch","indexName","searchClient","Configure","hitsPerPage","Autocomplete","suggestion","defaultRefinement","onDrop","acceptedFiles","Promise","resolve","reject","then","urlData","imageId","data","key","res","status","uploaded","console","log","catch","error","finally","getRootProps","getInputProps","Hits","hitComponent","cursor","margin","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4748babd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Highlight, connectAutoComplete } from 'react-instantsearch-dom';\nimport AutoSuggest from 'react-autosuggest';\n\nclass AutoComplete extends Component {\n  static propTypes = {\n    hits: PropTypes.arrayOf(PropTypes.object).isRequired,\n    currentRefinement: PropTypes.string.isRequired,\n    refine: PropTypes.func.isRequired,\n    onSuggestionSelected: PropTypes.func.isRequired,\n    onSuggestionCleared: PropTypes.func.isRequired,\n  };\n\n  state = {\n    value: this.props.currentRefinement,\n  };\n\n  onChange = (_, { newValue }) => {\n    if (!newValue) {\n      this.props.onSuggestionCleared();\n    }\n\n    this.setState({\n      value: newValue,\n    });\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.props.refine(value);\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.props.refine();\n  };\n\n  getSuggestionValue(hit) {\n    return hit.text\n  }\n\n  renderSuggestion(hit) {\n    return <>\n      <img height=\"25\" src={hit.url} style={{ marginRight: '8px' }} alt={hit.url} />\n      <Highlight attribute=\"text\" hit={hit} tagName=\"mark\" />\n    </>;\n  }\n\n  render() {\n    const { hits, onSuggestionSelected } = this.props;\n    const { value } = this.state;\n\n    const inputProps = {\n      placeholder: 'Search for some text...',\n      onChange: this.onChange,\n      value,\n    };\n\n    return (\n      <AutoSuggest\n        suggestions={hits}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        onSuggestionSelected={onSuggestionSelected}\n        getSuggestionValue={this.getSuggestionValue}\n        renderSuggestion={this.renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default connectAutoComplete(AutoComplete);\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  withHover: PropTypes.bool\n};\n\nconst Img = styled.img`\n  width: 100%;\n  height: 100%;\n  transition: transform 0.2s ease-in-out;\n`\n\nconst Wrapper = styled.div`\n  overflow: hidden;\n  border-radius: 8px;\n\n  ${props => {\n    return props.withHover ? \n      `\n        &:hover {\n          & ${Img} {\n            transform: scale(1.05);\n          }\n        }`\n    : null\n  }}\n`\n\nfunction Image({ src, alt, withHover, style, ...rest }) {\n  return (\n    <Wrapper withHover={withHover} style={style}>\n      <Img src={src} alt={alt} {...rest} />\n    </Wrapper>\n  );\n}\n\nexport default Image;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nfunction randomLoadingMessage() {\n  let lines = [\n    'You might want to get a cup of coffee...',\n    'Shovelling coal into the server...',\n    'Programming the flux capacitor',\n    'Please wait and enjoy the elevator music.',\n    \"At least you're not on hold.\",\n    'Please wait while the satellite moves into position.',\n    'Please wait, we are testing your patience.'\n  ];\n\n  return lines[Math.round(Math.random() * (lines.length - 1))];\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n`;\n\nconst Circles = styled.div`\n  width: auto;\n  text-align: center;\n\n  & > div {\n    width: ${props => (props.small ? '8px' : '16px')};\n    height: ${props => (props.small ? '8px' : '16px')};\n    margin: ${props => (props.small ? '0 4px' : '0 8px')};\n    background-color: ${props => (props.color ? props.color : '#333')};\n\n    border-radius: 100%;\n    display: inline-block;\n    -webkit-animation: scaleUpDown 1.5s infinite ease-in-out both;\n    animation: scaleUpDown 1.5s infinite ease-in-out both;\n  }\n\n  & .circle1 {\n    -webkit-animation-delay: -0.3s;\n    animation-delay: -0.3s;\n  }\n\n  & .circle2 {\n    -webkit-animation-delay: -0.15s;\n    animation-delay: -0.15s;\n  }\n\n  @-webkit-keyframes scaleUpDown {\n    0%,\n    80%,\n    100% {\n      -webkit-transform: scale(0);\n    }\n    40% {\n      -webkit-transform: scale(1);\n    }\n  }\n\n  @keyframes scaleUpDown {\n    0%,\n    80%,\n    100% {\n      -webkit-transform: scale(0);\n      transform: scale(0);\n    }\n    40% {\n      -webkit-transform: scale(1);\n      transform: scale(1);\n    }\n  }\n`;\n\nconst Message = styled.h4`\n  margin-top: 20px;\n  color: ${props => (props.color ? props.color : '#333')};\n`;\n\nconst LoadingBlock = ({ quiet, color, small, ...rest }) => (\n  <Wrapper {...rest}>\n    <Circles color={color} small={small}>\n      <div className=\"circle1\" />\n      <div className=\"circle2\" />\n      <div className=\"circle3\" />\n    </Circles>\n    {!quiet && (\n      <Message level={5} color={color}>\n        {randomLoadingMessage()}\n      </Message>\n    )}\n  </Wrapper>\n);\n\nLoadingBlock.propTypes = {\n  quiet: PropTypes.bool,\n  color: PropTypes.string,\n  small: PropTypes.bool\n};\n\nexport default LoadingBlock;\n","import axios from 'axios';\n\nconst url = process.env.REACT_APP_BASE_URL;\n\nconst getS3Url = () => axios.get(url + 'getS3Url');\n\nconst uploadJpeg = (url, file) => \n  axios.put(url, file, { headers: { 'Content-Type': file.type } });\n\nexport function uploadImage(image) {\n  const result = new Promise(function(resolve, reject) {\n    getS3Url()\n      .then(urlData => ({\n        imageId: process.env.REACT_APP_S3_BUCKET + urlData.data.key,\n        url: urlData.data.url\n      }))\n      .then(({ imageId, url }) => {\n        uploadJpeg(url, image).then(res => {\n          if (res.status === 200) {\n            resolve(imageId);\n          } else {\n            reject('Image failed to upload');\n          }\n        });\n      });\n  });\n\n  return result;\n}\n","import axios from 'axios';\n\nconst url = `${process.env.REACT_APP_BASE_URL}images`;\n\nexport const getAllImages = () => axios.get(`${url}`);\nexport const getOneImage = (id) => axios.get(`${url}/${id}`);\nexport const createImage = (image) => axios.post(`${url}`, { image });","import React, { useState } from 'react';\nimport Dropzone from 'react-dropzone'\nimport {\n  InstantSearch,\n  Hits,\n  Configure,\n  connectSearchBox,\n} from 'react-instantsearch-dom';\nimport Modal from 'react-responsive-modal';\nimport Container from '@material-ui/core/Container';\nimport Autocomplete from './components/Autocomplete';\nimport Image from './components/Image';\nimport LoadingBlock from './components/LoadingBlock'\nimport * as s3 from './api/s3.js'\nimport { createImage } from './api/images.js';\nimport './App.css';\n\nconst algoliasearch = require('algoliasearch');\nconst client = algoliasearch(process.env.REACT_APP_ALGOLIA_KEY, process.env.REACT_APP_ALGOLIA_SEARCH_ONLY);\nconst AutocompleteSearchBox = connectSearchBox(() => null);\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalContent, setModalContent] = useState();\n\n  function onSuggestionSelected(_, { suggestion }) {\n    setQuery(suggestion.text);\n  };\n\n  function onSuggestionCleared() {\n    setQuery('');\n  };\n\n  function Hit(props) {\n    return <Image withHover={true} style={{ cursor: 'pointer', margin: '0 2rem 2rem 0' }} onClick={() => {\n      setModalContent(<Image src={props.hit.url} alt={props.hit.url} />);\n      setModalOpen(true);\n    }} height=\"150\" src={props.hit.url} alt={props.hit.url} />\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)} center styles={{\n        overlay: {\n          backdropFilter: 'blur(20px)',\n          background: 'rgba(0, 0, 0, 0.6)'\n        },\n        modal: {\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          display: 'flex',\n          flexDirection: 'column',\n          maxWidth: '800px',\n          width: '100%',\n          padding: '50px'\n        }\n      }}>\n        {modalContent}\n      </Modal>\n      <h1>Image Document Search</h1>\n      <InstantSearch indexName=\"image-document-search\" searchClient={client}>\n        <Configure hitsPerPage={5} />\n        <Autocomplete\n          onSuggestionSelected={onSuggestionSelected}\n          onSuggestionCleared={onSuggestionCleared}\n        />\n      </InstantSearch>\n      <InstantSearch indexName=\"image-document-search\" searchClient={client}>\n        <AutocompleteSearchBox defaultRefinement={query} />\n        {loading ? (\n          <LoadingBlock />\n        ) : (\n          <Dropzone onDrop={acceptedFiles => {\n            setLoading(true);\n            s3.uploadImage(acceptedFiles[0])\n              .then(uploaded => {\n                return createImage(uploaded)\n                  .then(console.log)\n                  .catch(console.error)\n                  .finally(() => {\n                    setLoading(false);\n                  });\n              })\n              .catch(console.error)\n          }}>\n            {({ getRootProps, getInputProps }) => (\n              <section className=\"Dropzone\">\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <p>Drag 'n' drop some files here, or click to select files</p>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        )}\n        \n        <Hits hitComponent={Hit} />\n      </InstantSearch>\n    </Container>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}